export const swaggerConfig = {
  openapi: '3.0.0',
  info: {
    title: 'API Express com Router',
    version: '1.0.0',
    description: `
    ## API RESTful usando Express Router e TypeScript
    
    Esta API demonstra como organizar rotas usando Express Router de forma modular.
    
    ### Funcionalidades:
    - üèóÔ∏è Arquitetura modular com Express Router
    - üìù CRUD completo para usu√°rios e tarefas
    - ‚úÖ Valida√ß√£o com Zod
    - üìö Documenta√ß√£o autom√°tica com Swagger
    - üîí Middleware de seguran√ßa
    
    ### Como usar:
    1. Todos os endpoints da API est√£o sob o prefixo \`/api\`
    2. Usu√°rios: \`/api/users\`
    3. Tarefas: \`/api/tasks\`
    `,
    termsOfService: 'http://localhost:3334/terms',
    contact: {
      name: 'API Support',
      url: 'http://localhost:3334/contact',
      email: 'support@api.com'
    },
    license: {
      name: 'MIT',
      url: 'https://opensource.org/licenses/MIT'
    }
  },
  servers: [
    {
      url: 'http://localhost:3334',
      description: 'Servidor de desenvolvimento'
    },
    {
      url: 'https://api.example.com',
      description: 'Servidor de produ√ß√£o'
    }
  ],
  paths: {},
  components: {
    schemas: {
      User: {
        type: 'object',
        required: ['name', 'email'],
        properties: {
          id: {
            type: 'integer',
            description: 'ID √∫nico do usu√°rio',
            example: 1
          },
          name: {
            type: 'string',
            description: 'Nome completo do usu√°rio',
            minLength: 2,
            maxLength: 100,
            example: 'Jo√£o Silva'
          },
          email: {
            type: 'string',
            format: 'email',
            description: 'Email √∫nico do usu√°rio',
            example: 'joao@email.com'
          },
          age: {
            type: 'integer',
            minimum: 0,
            maximum: 120,
            description: 'Idade do usu√°rio',
            example: 30
          },
          createdAt: {
            type: 'string',
            format: 'date-time',
            description: 'Data de cria√ß√£o do usu√°rio',
            example: '2024-01-01T00:00:00.000Z'
          }
        }
      },
      Task: {
        type: 'object',
        required: ['title', 'userId'],
        properties: {
          id: {
            type: 'integer',
            description: 'ID √∫nico da tarefa',
            example: 1
          },
          title: {
            type: 'string',
            description: 'T√≠tulo da tarefa',
            minLength: 1,
            maxLength: 200,
            example: 'Estudar Express Router'
          },
          description: {
            type: 'string',
            description: 'Descri√ß√£o detalhada da tarefa',
            maxLength: 1000,
            example: 'Aprender como organizar rotas usando Express Router'
          },
          completed: {
            type: 'boolean',
            description: 'Status de conclus√£o da tarefa',
            default: false,
            example: false
          },
          userId: {
            type: 'integer',
            description: 'ID do usu√°rio que criou a tarefa',
            example: 1
          },
          createdAt: {
            type: 'string',
            format: 'date-time',
            description: 'Data de cria√ß√£o da tarefa',
            example: '2024-01-01T00:00:00.000Z'
          },
          updatedAt: {
            type: 'string',
            format: 'date-time',
            description: 'Data da √∫ltima atualiza√ß√£o',
            example: '2024-01-01T12:00:00.000Z'
          }
        }
      },
      ApiError: {
        type: 'object',
        properties: {
          error: {
            type: 'string',
            description: 'Tipo do erro',
            example: 'Bad Request'
          },
          message: {
            type: 'string',
            description: 'Mensagem descritiva do erro',
            example: 'Dados de entrada inv√°lidos'
          },
          details: {
            type: 'object',
            description: 'Detalhes espec√≠ficos do erro'
          },
          timestamp: {
            type: 'string',
            format: 'date-time',
            description: 'Timestamp do erro',
            example: '2024-01-01T00:00:00.000Z'
          }
        }
      },
      SuccessResponse: {
        type: 'object',
        properties: {
          success: {
            type: 'boolean',
            example: true
          },
          message: {
            type: 'string',
            example: 'Opera√ß√£o realizada com sucesso'
          },
          data: {
            type: 'object',
            description: 'Dados retornados pela opera√ß√£o'
          }
        }
      }
    },
    responses: {
      BadRequest: {
        description: 'Requisi√ß√£o inv√°lida',
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/ApiError'
            }
          }
        }
      },
      NotFound: {
        description: 'Recurso n√£o encontrado',
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/ApiError'
            }
          }
        }
      },
      InternalServerError: {
        description: 'Erro interno do servidor',
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/ApiError'
            }
          }
        }
      }
    },
    parameters: {
      IdParam: {
        name: 'id',
        in: 'path',
        required: true,
        description: 'ID √∫nico do recurso',
        schema: {
          type: 'integer',
          minimum: 1
        },
        example: 1
      }
    }
  },
  tags: [
    {
      name: 'Users',
      description: 'Opera√ß√µes relacionadas aos usu√°rios'
    },
    {
      name: 'Tasks',
      description: 'Opera√ß√µes relacionadas √†s tarefas'
    }
  ]
};
